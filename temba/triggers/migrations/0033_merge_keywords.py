# Generated by Django 4.2.3 on 2023-10-18 20:18

from collections import defaultdict

from django.db import migrations, transaction


def merge_keyword_triggers(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")

    for org in Org.objects.filter(is_active=True):
        merge_org_triggers(org)


def merge_org_triggers(org):  # pragma: no cover
    triggers_by_params = defaultdict(list)

    for trigger in org.triggers.filter(trigger_type="K", is_active=True).order_by("id"):
        params = (
            trigger.flow,
            trigger.match_type,
            trigger.channel,
            tuple(trigger.groups.order_by("id")),
            tuple(trigger.exclude_groups.order_by("id")),
            trigger.is_archived,
        )
        triggers_by_params[params].append(trigger)

    for params, triggers in triggers_by_params.items():
        if len(triggers) <= 1:
            continue

        flow, match_type, channel, groups, exclude_groups, is_archived = params
        user = triggers[0].created_by
        merged_keywords = set()
        for t in triggers:
            merged_keywords.update(t.keywords)

        with transaction.atomic():
            merged = org.triggers.create(
                trigger_type="K",
                flow=flow,
                keywords=list(sorted(merged_keywords)),
                match_type=match_type,
                channel=channel,
                created_by=user,
                modified_by=user,
                is_archived=is_archived,
            )
            for g in groups:
                merged.groups.add(g)
            for g in exclude_groups:
                merged.exclude_groups.add(g)

            print(
                f"Created merged trigger id={merged.id} org={merged.org_id} keywords={merged.keywords} "
                f"flow={merged.flow_id} type={merged.match_type} channel={merged.channel_id} archived={merged.is_archived}"
            )

            for t in triggers:
                print(
                    f" > Deleted trigger id={t.id} org={t.org_id} keywords={t.keywords} "
                    f"flow={t.flow_id} type={t.match_type} channel={t.channel_id} archived={t.is_archived}"
                )
                t.delete()


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    merge_keyword_triggers(apps, None)


class Migration(migrations.Migration):
    dependencies = [("triggers", "0032_remove_trigger_keyword")]

    operations = [migrations.RunPython(merge_keyword_triggers, reverse)]

# Generated by Django 4.2.8 on 2024-01-05 15:09

import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import temba.orgs.models
import temba.utils.fields
import temba.utils.uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("orgs", "0133_squashed"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contacts", "0183_squashed"),
        ("flows", "0329_squashed"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=temba.utils.uuid.uuid4, unique=True)),
                ("body", models.TextField()),
                (
                    "status",
                    models.CharField(choices=[("O", "Open"), ("C", "Closed")], max_length=1),
                ),
                ("opened_on", models.DateTimeField(default=django.utils.timezone.now)),
                ("replied_on", models.DateTimeField(null=True)),
                ("closed_on", models.DateTimeField(null=True)),
                (
                    "modified_on",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "last_activity_on",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_tickets",
                        to="orgs.user",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tickets",
                        to="contacts.contact",
                    ),
                ),
                (
                    "opened_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="opened_tickets",
                        to="orgs.user",
                    ),
                ),
                (
                    "opened_in",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="opened_tickets",
                        to="flows.flow",
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tickets",
                        to="orgs.org",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this item is active, use this instead of deleting",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("uuid", models.UUIDField(default=temba.utils.uuid.uuid4, unique=True)),
                (
                    "name",
                    models.CharField(max_length=64, validators=[temba.utils.fields.NameValidator(64)]),
                ),
                ("is_system", models.BooleanField(default=False)),
                ("is_default", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="topics",
                        to="orgs.org",
                    ),
                ),
            ],
            bases=(models.Model, temba.orgs.models.DependencyMixin),
        ),
        migrations.CreateModel(
            name="TicketEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("O", "Opened"),
                            ("A", "Assigned"),
                            ("N", "Note Added"),
                            ("T", "Topic Changed"),
                            ("C", "Closed"),
                            ("R", "Reopened"),
                        ],
                        max_length=1,
                    ),
                ),
                ("note", models.TextField(max_length=4096, null=True)),
                ("created_on", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "assignee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_assignee_events",
                        to="orgs.user",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_events",
                        to="contacts.contact",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_events",
                        to="orgs.org",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="events",
                        to="tickets.ticket",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_events",
                        to="tickets.topic",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TicketDailyTiming",
            fields=[
                (
                    "id",
                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),
                ),
                ("is_squashed", models.BooleanField(default=False)),
                ("count_type", models.CharField(max_length=1)),
                ("scope", models.CharField(max_length=32)),
                ("count", models.IntegerField()),
                ("day", models.DateField()),
                ("seconds", models.BigIntegerField()),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["count_type", "scope", "day"],
                        name="tickets_dailytiming_type_scope",
                    ),
                    models.Index(
                        condition=models.Q(("is_squashed", False)),
                        fields=["count_type", "scope", "day"],
                        name="tickets_dailytiming_unsquashed",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TicketDailyCount",
            fields=[
                (
                    "id",
                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),
                ),
                ("is_squashed", models.BooleanField(default=False)),
                ("count_type", models.CharField(max_length=1)),
                ("scope", models.CharField(max_length=32)),
                ("count", models.IntegerField()),
                ("day", models.DateField()),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["count_type", "scope", "day"],
                        name="tickets_dailycount_type_scope",
                    ),
                    models.Index(
                        condition=models.Q(("is_squashed", False)),
                        fields=["count_type", "scope", "day"],
                        name="tickets_dailycount_unsquashed",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TicketCount",
            fields=[
                (
                    "id",
                    models.BigAutoField(auto_created=True, primary_key=True, serialize=False),
                ),
                ("is_squashed", models.BooleanField(default=False)),
                ("scope", models.CharField(max_length=32)),
                (
                    "status",
                    models.CharField(choices=[("O", "Open"), ("C", "Closed")], max_length=1),
                ),
                ("count", models.IntegerField(default=0)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ticket_counts",
                        to="orgs.org",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="ticket",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="tickets",
                to="tickets.topic",
            ),
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this item is active, use this instead of deleting",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("uuid", models.UUIDField(default=temba.utils.uuid.uuid4, unique=True)),
                (
                    "name",
                    models.CharField(max_length=64, validators=[temba.utils.fields.NameValidator(64)]),
                ),
                ("is_system", models.BooleanField(default=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="teams",
                        to="orgs.org",
                    ),
                ),
                (
                    "topics",
                    models.ManyToManyField(related_name="teams", to="tickets.topic"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExportTicketsTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this item is active, use this instead of deleting",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("uuid", models.UUIDField(default=temba.utils.uuid.uuid4, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "Pending"),
                            ("O", "Processing"),
                            ("C", "Complete"),
                            ("F", "Failed"),
                        ],
                        default="P",
                        max_length=1,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The organization of the user.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)ss",
                        to="orgs.org",
                    ),
                ),
                (
                    "with_fields",
                    models.ManyToManyField(related_name="%(class)s_exports", to="contacts.contactfield"),
                ),
                (
                    "with_groups",
                    models.ManyToManyField(related_name="%(class)s_exports", to="contacts.contactgroup"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="topic",
            constraint=models.UniqueConstraint(
                models.F("org"),
                django.db.models.functions.text.Lower("name"),
                name="unique_topic_names",
            ),
        ),
        migrations.AddIndex(
            model_name="ticketevent",
            index=models.Index(fields=["contact", "created_on"], name="ticketevents_contact_created"),
        ),
        migrations.AddIndex(
            model_name="ticketcount",
            index=models.Index(fields=["org", "status"], name="tickets_tic_org_id_3bdc4d_idx"),
        ),
        migrations.AddIndex(
            model_name="ticketcount",
            index=models.Index(fields=["org", "scope", "status"], name="tickets_tic_org_id_415b13_idx"),
        ),
        migrations.AddIndex(
            model_name="ticketcount",
            index=models.Index(
                condition=models.Q(("is_squashed", False)),
                fields=["org", "scope", "status"],
                name="ticket_count_unsquashed",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["org", "status", "-last_activity_on", "-id"],
                name="tickets_org_status",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["org", "assignee", "status", "-last_activity_on", "-id"],
                name="tickets_org_assignee_status",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                condition=models.Q(("status", "O")),
                fields=["contact", "-opened_on"],
                name="tickets_contact_open",
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(fields=["org", "-modified_on", "-id"], name="tickets_api_by_org"),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(fields=["contact", "-modified_on", "-id"], name="tickets_api_by_contact"),
        ),
        migrations.AddConstraint(
            model_name="team",
            constraint=models.UniqueConstraint(
                models.F("org"),
                django.db.models.functions.text.Lower("name"),
                name="unique_team_names",
            ),
        ),
    ]

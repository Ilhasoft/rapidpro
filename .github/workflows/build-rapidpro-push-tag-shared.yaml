name: Build Rapidpro in Shared (Push Tag)

on:
  push:
    tags:
      - 'v*.*.*-develop*'
      - 'v*.*.*-staging*'
      - 'v*.*.*'

jobs:
  docker:
    runs-on: ubuntu-latest 
    steps:

      - name: Set variables
        run: |
            TAG=$(echo $GITHUB_REF|cut -d"/" -f3)
            if $(echo  $TAG|grep --silent -e 'v*.*.*-develop*')
            then 
              echo "Found environment: DEVELOP - $TAG"
              echo "MANIFESTS_ENVIRONMENT=develop" >> $GITHUB_ENV
              echo "MANIFESTS_ENVIRONMENT=develop"
              echo "TAG=$TAG" >> $GITHUB_ENV
              echo "TAG=$TAG"
              VERSION=${TAG#v} 
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "VERSION=$VERSION"
              echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
              echo "COMMIT_SHA=$GITHUB_SHA"
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG" >> $GITHUB_ENV
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG"
            elif $(echo  $TAG|grep --silent -e 'v*.*.*-staging*')
            then
              echo "Found environment: STAGING - $TAG"
              echo "MANIFESTS_ENVIRONMENT=staging" >> $GITHUB_ENV
              echo "MANIFESTS_ENVIRONMENT=staging"
              echo "TAG=$TAG" >> $GITHUB_ENV
              echo "TAG=$TAG"
              VERSION=${TAG#v} 
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "VERSION=$VERSION"
              echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
              echo "COMMIT_SHA=$GITHUB_SHA"
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG" >> $GITHUB_ENV
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG"
            elif $(echo  $TAG|grep --silent -e 'v*.*.*')
            then
              echo "No environment found, assuming: PRODUCTION - $TAG"
              echo "MANIFESTS_ENVIRONMENT=production" >> $GITHUB_ENV
              echo "MANIFESTS_ENVIRONMENT=production"
              echo "TAG=$TAG" >> $GITHUB_ENV
              echo "TAG=$TAG"
              VERSION=${TAG#v} 
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "VERSION=$VERSION"
              echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
              echo "COMMIT_SHA=$GITHUB_SHA"
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG" >> $GITHUB_ENV
              echo "IMAGE_TAG=869898323958.dkr.ecr.us-east-1.amazonaws.com/push-backend:$TAG"
            else
              echo 'Not a valid tag. Skipping...'
              exit 1
            fi

      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{env.GITHUB_SHA}}
          repository: Ilhasoft/rapidpro

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 869898323958.dkr.ecr.us-east-1.amazonaws.com
          username: ${{secrets.AWS_ACCESS_KEY_ID_SHARED}}
          password: ${{secrets.AWS_SECRET_ACCESS_KEY_SHARED}}

      - name: Build and push - Rapidpro Image
        id: docker_build1
        uses: docker/build-push-action@v2
        with:
          context: .
          labels: branch=${{env.TAG}},commit=${{env.COMMIT_SHA}},repository=https://github.com/Ilhasoft/rapidpro
          file: ./docker/Dockerfile
          push: true
          tags: ${{env.IMAGE_TAG}}
          no-cache: true
          build-args: |
            RAPIDPRO_APPS_GIT_URL=https://github.com/Ilhasoft/rapidpro-apps.git 
            RAPIDPRO_APPS_GIT_BRANCH=main
            PROTOBUFFERS_URL=https://github.com/Ilhasoft/weni-protobuffers.git
            FLOWEDITOR_VERSION=1.15.1 
            FLOWEDITOR_REPO=https://github.com/ilhasoft/floweditor.git
            FLOWEDITOR_BRANCH=main

      - name: Build and push - Rapidpro Varnish Image
        id: docker_build2
        uses: docker/build-push-action@v2
        with:
          context: .
          labels: branch=${{env.TAG}},commit=${{env.COMMIT_SHA}},repository=https://github.com/Ilhasoft/rapidpro
          file: ./docker/Dockerfile
          push: true
          tags: ${{env.IMAGE_TAG}}
          no-cache: true
          build-args: |
            BACKEND_ADDRESS=push-${{env.MANIFESTS_ENVIRONMENT}}:8000
          #build-args: |
          #  BACKEND_ADDRESS=flows:8000

      - name: Check out Kubernetes Manifests
        uses: actions/checkout@master
        with:
          ref: main
          repository: Ilhasoft/kubernetes-manifests-platform
          token: ${{secrets.DEVOPS_GITHUB_PERMANENT_TOKEN}}
          path: ./kubernetes-manifests/

      - name: Update image on deployment
        run: |
            which jq > /dev/null 2>&1 || ( sudo apt update ; sudo apt install -y jq )
            # Dep: coreutils
            verlte() {
              [ "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt(){
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }
            export PROJECT_DIR="weni-flows/flows" PATCH_TARGET_1="deployment-flows.json" PATCH_TARGET_2="deployment-celery.json" 
            for e in ${{github.event.inputs.destination-env}}; do
              echo "Update ${e}:"
              if [ ! -d "kubernetes-manifests/${PROJECT_DIR}/${e}" ] ; then
                echo "kubernetes-manifests/${PROJECT_DIR}/${e}: Does not exist, skipping"
              elif [ ! -r "kubernetes-manifests/${PROJECT_DIR}/${e}/kustomization.yaml" ] ; then
                echo "kubernetes-manifests/${PROJECT_DIR}/${e}/kustomization.yaml: Does not readable, skipping"
              elif [ ! -r "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_1}" ] ; then
                echo "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_1}: Does not readable, skipping"
              elif [ ! -r "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_2}" ] ; then
                echo "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_2}: Does not readable, skipping"
              else
                OLD_IMAGE=$(
                  cat "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_1}" \
                    | jq '.[] | select(.path == "/spec/template/spec/containers/0/image") | .value'
                )
                echo "Old image to replace: ${OLD_IMAGE}"
                OLD_VERSION=$(
                  echo "${OLD_IMAGE}" \
                    | sed s'/^.*[v:-]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/'g \
                    | head -n1
                )
                NEW_VERSION=$(echo ${{github.event.inputs.tag-name}}|grep -o -e '[0-9]*\.[0-9]*\.[0-9]*')
                echo "Old image version to compare: ${OLD_VERSION}<=${NEW_VERSION}"
                if verlte "${OLD_VERSION}" "${NEW_VERSION}" ; then
                  echo 'New configurations:'
                  new_configuration=$(
                    cat "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_1}" \
                      | jq '(..|select(.path == "/spec/template/spec/containers/0/image")?) += {value: "'"${{env.IMAGE_TAG}}"'"}' \
                      | jq '(..|select(.path == "/spec/template/spec/containers/1/image")?) += {value: "'"${{env.IMAGE_TAG}}-varnish"'"}'
                  )
                  echo "${new_configuration}"
                  echo "${new_configuration}" > "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_1}"
                  new_configuration=$(
                    cat "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_2}" \
                      | jq '(..|select(.path == "/spec/template/spec/containers/0/image")?) += {value: "'"${{env.IMAGE_TAG}}"'"}'
                  )
                  echo "${new_configuration}"
                  echo "${new_configuration}" > "kubernetes-manifests/${PROJECT_DIR}/${e}/${PATCH_TARGET_2}"
                else
                  echo "Version in file is greater than build, skiping update yaml"
                fi
              fi
            done
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          repository: Ilhasoft/kubernetes-manifests-platform
          directory: ./kubernetes-manifests/
          branch: main
          message: "From Rapidpro Build (Push-Tag)"

      - name: Generated Image
        run: |
            echo "IMAGE:      " ${{env.IMAGE_TAG}}